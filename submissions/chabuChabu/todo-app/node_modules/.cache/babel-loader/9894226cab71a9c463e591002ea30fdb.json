{"ast":null,"code":"var _jsxFileName = \"/Users/chabuchabu/Desktop/todo-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from './components/Form';\nimport FilterButton from './components/FilterButton';\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n_c = FILTER_NAMES;\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      //if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted \n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    toggleTaskCompleted: toggleTaskCompleted // deleteTask={deleteTask}\n    ,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 6\n  }, this));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'items' : 'items';\n  const headingText = `${taskList.length} ${tasksNoun} left`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [taskList, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", headingText]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 10\n      }, this), filterList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"FILTER_NAMES\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/chabuchabu/Desktop/todo-app/src/App.js"],"names":["React","useState","Todo","Form","FilterButton","nanoid","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","App","props","tasks","setTasks","filter","setFilter","deleteTask","id","remainingTasks","addTask","name","newTask","editTask","newName","editedTaskList","map","toggleTaskCompleted","updatedTasks","taskList","filterList","tasksNoun","length","headingText"],"mappings":"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","sourcesContent":["import React,{useState} from 'react';\nimport Todo from \"./components/Todo\";\nimport Form from './components/Form';\nimport FilterButton from './components/FilterButton';\nimport {nanoid} from \"nanoid\";\n\nconst FILTER_MAP = {\n  All:() => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n\n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function addTask(name) {\n    const newTask = {id: \"todo-\" + nanoid(),name: name, completed:false}\n    setTasks([...tasks, newTask]);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      //if this task has the same ID as the edited task\n      if(id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    })\n    setTasks(editedTaskList);\n  }\n\n  function toggleTaskCompleted(id) {\n\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if(id === task.id) {\n      // use object spread to make a new object\n      // whose `completed` prop has been inverted \n      return {...task,completed: !task.completed}\n      }\n      return task;\n    })\n    setTasks(updatedTasks);\n  }\n\n   const taskList = tasks\n   .filter(FILTER_MAP[filter])\n   .map(task => (\n     <Todo \n       id={task.id} \n        name={task.name} \n        completed={task.completed} \n        key={task.id}\n        toggleTaskCompleted={toggleTaskCompleted}\n        // deleteTask={deleteTask}\n        editTask={editTask}\n     />\n   ));\n\n   const filterList = FILTER_NAMES.map(name => (\n    <FilterButton \n      key={name} \n      name={name}\n      isPressed={name === filter} \n      setFilter={setFilter}\n    />\n   ));\n  \n  const tasksNoun = taskList.length !== 1 ? 'items' : 'items';\n  const headingText = `${taskList.length} ${tasksNoun} left`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>Todo</h1>\n      <Form addTask={addTask}/>\n      <ul>{taskList} </ul>\n      <div >\n         <p> {headingText}</p> \n         {filterList}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}